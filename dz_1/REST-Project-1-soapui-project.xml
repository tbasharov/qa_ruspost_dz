<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a8169c7f-c309-4e94-b5d0-cf3f876c2e19" activeEnvironment="Default" name="REST Project 1" soapui-version="5.7.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="2a128704-8db8-4332-9ec6-cba886299f53" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://reqres.in" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://MacBook-Pro-Timur.local:8080/</con:endpoint><con:endpoint>https://reqres.in</con:endpoint></con:endpoints><con:resource name="Users" path="/api/users" id="dfa29950-6cbe-42b6-8c1d-85e83308a3f9"><con:settings/><con:parameters/><con:method name="Users 1" id="b3080957-67e7-4ddf-b58e-fb570c2639d4" method="GET"><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value>2</con:value><con:style>QUERY</con:style><con:default>2</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:user="https://reqres.in/api/users">user:Fault</con:element></con:representation><con:request name="Request 1" id="9774b383-3ad7-40c8-9d9d-b636777ba502" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://MacBook-Pro-Timur.local:8080/</con:endpoint><con:request/><con:originalUri>https://reqres.in/api/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>page</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="e11e7e5c-770d-4be8-b16a-c2a4492916ad" port="8080" path="/" host="MacBook-Pro-Timur.local" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/users" method="GET" resourcePath="/api/users" id="ce217715-7efd-4e9f-a3cc-b979cac427cf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="65d5f620-9b29-4f2f-8aad-47533c63b511" httpResponseStatus="500" mediaType="application/json" encoding="utf-8"><con:settings/><con:responseContent>{"page":2,"per_page":6,"total":1000,"total_pages":2,"data":[{"id":7,"email":"michael.lawson@reqres.in","first_name":"Michael","last_name":"Lawson","avatar":"https://reqres.in/img/faces/7-image.jpg"},{"id":8,"email":"lindsay.ferguson@reqres.in","first_name":"Lindsay","last_name":"Ferguson","avatar":"https://reqres.in/img/faces/8-image.jpg"},{"id":9,"email":"tobias.funke@reqres.in","first_name":"Tobias","last_name":"Funke","avatar":"https://reqres.in/img/faces/9-image.jpg"},{"id":10,"email":"byron.fields@reqres.in","first_name":"Byron","last_name":"Fields","avatar":"https://reqres.in/img/faces/10-image.jpg"},{"id":11,"email":"george.edwards@reqres.in","first_name":"George","last_name":"Edwards","avatar":"https://reqres.in/img/faces/11-image.jpg"},{"id":12,"email":"rachel.howell@reqres.in","first_name":"Rachel","last_name":"Howell","avatar":"https://reqres.in/img/faces/12-image.jpg"}],"support":{"url":"https://reqres.in/#support-heading","text":"To keep ReqRes free, contributions towards server costs are appreciated!"}}</con:responseContent><con:header><con:name>Transfer-Encoding</con:name><con:value>chunked</con:value></con:header><con:header><con:name>Server</con:name><con:value>cloudflare</con:value></con:header><con:header><con:name>CF-RAY</con:name><con:value>70105a4c6e66929c-FRA</con:value></con:header><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Connection</con:name><con:value>keep-alive</con:value></con:header><con:header><con:name>Date</con:name><con:value>Sun, 24 Apr 2022 16:53:01 GMT</con:value></con:header><con:header><con:name>Via</con:name><con:value>1.1 vegur</con:value></con:header><con:header><con:name>CF-Cache-Status</con:name><con:value>HIT</con:value></con:header><con:header><con:name>Etag</con:name><con:value>W/"406-ut0vzoCuidvyMf8arZpMpJ6ZRDw"</con:value></con:header><con:header><con:name>Cache-Control</con:name><con:value>max-age=14400</con:value></con:header><con:header><con:name>NEL</con:name><con:value>{"success_fraction":0,"report_to":"cf-nel","max_age":604800}</con:value></con:header><con:header><con:name>Report-To</con:name><con:value>{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=Hbz1UtJTLSlgGxta1Hm2cG7wd0Yru1uFEW%2BV6FyA0QyNnotO8J5yLiEnO7I9nC21a8HrAvOmJqQITiwchbfoeg25Xx0S7RpydScgBC1GYDXSpH6L7Xgw%2BVxZDR0%3D"}],"group":"cf-nel","max_age":604800}</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Accept-Encoding</con:value></con:header><con:header><con:name>alt-svc</con:name><con:value>h3=":443"; ma=86400, h3-29=":443"; ma=86400</con:value></con:header><con:header><con:name>Age</con:name><con:value>1081</con:value></con:header><con:header><con:name>X-Powered-By</con:name><con:value>Express</con:value></con:header><con:header><con:name>Expect-CT</con:name><con:value>max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>